## SPDX-FileCopyrightText: 2021 The SMW Music Python Project Authors
## <https://github.com/com-posers-pit/smw_music/blob/develop/AUTHORS.rst>
##
## SPDX-License-Identifier: AGPL-3.0-only
#amk 2

; MusicXML->AMK v${version}
%if datetime:
; Built: ${datetime}
%endif

#spc {
    #author  "${song.composer}"
    #title   "${song.title}"
    #game    "${song.game}"
    #comment "Ported by: ${song.porter}"
}
%if custom_samples:

; PORTER: UPDATE SAMPLES AND INSTRUMENTS HERE
#path "folder name"

#samples {
    #optimized
    "Sample1.brr"
    "Sample2.brr"
}

#instruments {
    "Sample1.brr"        $00$00 $00 $00$00 ;@30
    "Sample2.brr"        $00$00 $00 $00$00 ;@31
}
%endif

; PORTER: GLOBAL VOLUME HERE
w180

%if instruments or percussion:
; PORTER: INSTRUMENT DEFINITIONS HERE

%endif
<%
    voice = lambda x: x.name + "_voice"
    dyn = lambda x: x.name + "_dyn"
    artic = lambda x: x.name + "_artic"
    pan = lambda x: x.name + "_pan"

    dyn_sz = max((len(dyn(key))) for key in instruments)
    dyn_str = " ".join(f'\\"_{vol}={val:02X}\\"' for vol, val in volmap.items())
    artic_sz = max((len(artic(key))) for key in instruments)
    artic_str = '\\"qDEF=q7A\\" \\"qSTAC=q5A\\" \\"qACC=q7F\\"'
    pan_sz = max((len(pan(key))) for key in instruments)
%>\
; Instrument voice definitions
%for key, val in instruments.items():
"${voice(key)}=${val} o3"
%endfor

; Instrument dynamics definitions
%for key in instruments:
"${f'{dyn(key):{dyn_sz}}'} = ${dyn_str}"
%endfor

; Instrument articulation definitions
%for key in instruments:
"${f'{artic(key):{artic_sz}}'} = ${artic_str}"
%endfor

; Instrument pan definitions
%for key in instruments:
"${f'{pan(key):{pan_sz}}'} = "
%endfor

%if percussion:
; Percussion definitions
"CR3=@22 CR3n" "CR3n=o6 c"
"CR2=@22 CR2n" "CR2n=o5 b"
"CR=@22 CRn"   "CRn=o5 a"
"CH=@22 CHn"   "CHn=o5 g"
"OH=@22 OHn"   "OHn=o5 f"
"RD=@22 RDn"   "RDn=o5 e"
"RD2=@22 RD2n" "RD2n=o5 d"
"HT=@24 HTn"   "HTn=o5 e"
"MT=@23 MTn"   "MTn=o5 d"
"SN=@10 SNn"   "SNn=o5 c"
"LT=@21 LTn"   "LTn=o4 a"
"KD=@21 KDn"   "KDn=o4 f"

%endif
%if echo_config:

; Echo settings

${f'$EF${echo_config.channel_reg:02X}${echo_config.left_vol_reg:02X}${echo_config.right_vol_reg:02X}'}
${f'$F1${echo_config.delay:02X}${echo_config.fb_reg:02X}${echo_config.fir_filt:02X}'}
%endif

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Macro magic.  Look, but don't touch.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; Instrument definitions.  Smoosh together the instrument voice definition
; with its dynamics, articulation, and pan definitions
%for key in instruments:
"${key.name} = ${voice(key)} ${dyn(key)} ${artic(key)} ${pan(key)}"
%endfor

; This is a way to use a hex value in a volume command.  We want to use hex
; values because that's how volume fades work.  Update the corresponding
; dynamics marks in each instrument.
%for key in volmap:
${f'"v{key: <4} = $E7$_{key}"'}
%endfor

; Magic hex values are no fun, we'll give them nicer names
"LEGATO_ON=$F4$01"
"LEGATO_OFF=$F4$01"
"GLOBAL_LEGATO=$F4$02"
"CRESC=$E8"
"DIM=$E8"
%for n, channel in enumerate(channels):

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Staff ${n + 1}
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#${n}\
${f" t{tempo}" if n == 0 else ''}\
${" GLOBAL_LEGATO" if global_legato and (n == 0) else ""}\
${" /" if "/" not in channel else ""}\

${channel}
%endfor
